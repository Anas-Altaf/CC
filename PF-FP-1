#include<iostream>
#include<windows.h>
#include<cstdlib>
#include<ctime>
#include<conio.h>
using namespace std;
#define KEY_UP 72
#define KEY_DOWN 80
#define KEY_LEFT 75
#define KEY_RIGHT 77
const int ROW=10,COL=10;
//First Perfect Board 
void FirstBoardGenerator(char board[][COL]);
char RandSymbolAssigner();
void SymbolGeneration(char board[][COL]);
void checker(char board[][COL]);
void SymbolGeneration2(char board[][COL]);
void CheckedGenerater(char board[][COL]);
void board10x10(char board[][COL]);
//Further Working
void swapper(int row,int col,char board[][COL]);
int main()
{
	char board[ROW][COL];
	FirstBoardGenerator(board);
	int row,col;
	cout<<"\nSelect Row and Column to Swap:\n";
	cout<<"\nEnter Row Number = ";cin>>row;
	cout<<"\nEnter Column Number = ";cin>>col;
	swapper(row,col,board);
	board10x10(board);
	system("pause");
	return 0;
}
void FirstBoardGenerator(char board[][COL])
{
	SymbolGeneration(board);
	checker(board);
	CheckedGenerater(board);
}
//First Perfect Board Generation Functions
void SymbolGeneration(char board[ROW][COL])
{
	srand(time(0));
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{	
			board[i][j]=RandSymbolAssigner();
		}
	}
}
void board10x10(char board[][COL])
{
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	cout<<"Here is the Board : "<<endl;
	cout<<".---.---.---.---.---.---.---.---.---.---."<<endl;
	cout<<"|   |   |   |   |   |   |   |   |   |   |"<<endl;
	for(int i=0;i<ROW;i++)
	{
		cout<<"| ";
		for(int j=0;j<COL;j++)
		{
			switch (board[i][j])
			   {
			   case '#':
				SetConsoleTextAttribute(h, 9);
				break;
			   case '@':
				SetConsoleTextAttribute(h, 10);
				break;
			   case '$':
				SetConsoleTextAttribute(h, 11);
				break;
			   case '%':
				SetConsoleTextAttribute(h, 12);
				break;
			   case '+':
				SetConsoleTextAttribute(h, 13);
				break;
				case '&':
				SetConsoleTextAttribute(h, 14);
				break;
				case '=':
				SetConsoleTextAttribute(h, 15);
				break;
			   }
			cout<<board[i][j]<<" | ";	
		}
		if(i==ROW-1)
			cout<<endl<<"|...|...|...|...|...|...|...|...|...|...|"<<endl;
		else
		{
		cout<<endl<<"|___|___|___|___|___|___|___|___|___|___|";
		cout<<endl<<"|   |   |   |   |   |   |   |   |   |   |"<<endl;
		}
	}
}
void SymbolGeneration2(char board[ROW][COL])
{
	srand(time(0));
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{		
			{
				if(board[i][j]==' ')
					board[i][j]=RandSymbolAssigner();
			}
		}
	}
}
void checker(char board[][COL])
{
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			if((board[j][i]==board[j+1][i]&&board[j][i]==board[j+2][i])||(board[i][j]==board[i][j+1]&&board[i][j]==board[i][j+2]))
			{
				board[j+2][i]=' ';
				board[i][j+2]=' ';
			}
			if((board[i][j]==board[i+1][j+1]&&board[i][j]==board[i+2][j+2])||(board[i][j]==board[i+1][j-1]&&board[i][j]==board[i+2][j-2]))
			{
				board[i+2][j+2]=' ';
				board[i+2][j-2]=' ';
			}	
		}
	}
	
}
void CheckedGenerater(char board[][COL])
{
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			while(board[i][j]==' ')
			{
				SymbolGeneration2(board);
				checker(board);
			}
				
		}
	}
}
void CheckedGenerater2(char board[][COL])
{
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			if(board[i][j]==' ')
			{
				CheckedGenerater(board);
			}
				
		}
	}
}
char RandSymbolAssigner()
{
	int value=rand()%8;
	switch(value)
	{
		case 0: return '@';
		case 1: return '#';
		case 2: return '$';
		case 3: return '%';
		case 4: return '+';
		case 5: return '&';
		case 6: return '=';
		default:return '+';
	}
}
void swapper(int row,int col,char board[][COL])
{
	row=row-1;
	col=col-1;
	int keyinput;
	cout<<"\nEnter Direction = ";
	cin>>keyinput;
	bool swapdone=true;
	while(swapdone)
	{
		swapdone=true;
		cout<<"\nSelect Row and Column to Swap:\n";
		cout<<"\nEnter Row Number = ";cin>>row;
		cout<<"\nEnter Column Number = ";cin>>col;
		switch(keyinput= _getch())
		{
			case KEY_UP:
				{
					if(row!=0)
					{
						if((board[row][col]==board[row-1][col+1]&&board[row][col]==board[row-1][col+2])||(board[row][col]==board[row-1][col+1]&&board[row][col]==board[row-1][col-1])||(board[row][col]==board[row-1][col-1]&&board[row][col]==board[row-1][col-2])||(board[row][col]==board[row-2][col]&&board[row][col]==board[row-3][col]))
						{
							char temp=board[row][col];
								board[row][col]=board[row-1][col];
								board[row-1][col]=temp;
								swapdone=false;
						}
						else if((board[row-1][col]==board[row][col+1]&&board[row-1][col]==board[row][col+2])||(board[row-1][col]==board[row][col-1]&&board[row-1][col]==board[row][col-2])||(board[row-1][col]==board[row+1][col]&&board[row-1][col]==board[row+2][col])||(board[row-1][col]==board[row][col-1]&&board[row-1][col]==board[row][col+1]))
						{
							char temp=board[row][col];
								board[row][col]=board[row-1][col];
								board[row-1][col]=temp;
								swapdone=false;
						}
						else
						{ cout<<"\nNot Possible!\n";
						}
					}
					else
					{
						cout<<"\nNot Possible!\n";
					}
				}
			break;
			case KEY_RIGHT:
				{
					if(col!=COL-1)
					{
						if((board[row][col]==board[row-1][col+1]&&board[row][col]==board[row-2][col+1])||(board[row][col]==board[row][col+2]&&board[row][col]==board[row][col+3])||(board[row][col]==board[row+1][col+1]&&board[row][col]==board[row+2][col+1])||(board[row][col]==board[row-1][col+1]&&board[row][col]==board[row+1][col+1]))
						{
							char temp=board[row][col];
								board[row][col]=board[row][col+1];
								board[row][col+1]=temp;
								swapdone=false;
						}
						else if((board[row][col+1]==board[row][col-1]&&board[row][col+1]==board[row][col-2])||(board[row][col+1]==board[row-1][col]&&board[row][col+1]==board[row-2][col])||(board[row][col+1]==board[row+1][col]&&board[row][col+1]==board[row+2][col])||(board[row][col+1]==board[row][col]&&board[row][col+1]==board[row][col+2]))
						{
							char temp=board[row][col];
								board[row][col]=board[row][col+1];
								board[row][col+1]=temp;
								swapdone=false;
						}
						else
						{ cout<<"\nNot Possible!\n";
						}
					}
					else
					{
						cout<<"\nNot Possible!\n";
					}
				}
			break;
			case KEY_LEFT:
				{
					if(col!=0)
					{
						if((board[row][col]==board[row][col-2]&&board[row][col]==board[row][col-3])||(board[row][col]==board[row+1][col-1]&&board[row][col]==board[row+2][col-1])||(board[row][col]==board[row-1][col-1]&&board[row][col]==board[row-2][col-1])||(board[row][col]==board[row-1][col-1]&&board[row][col]==board[row+1][col-1]))
						{
							char temp=board[row][col];
								board[row][col]=board[row][col-1];
								board[row][col-1]=temp;
								swapdone=false;
						}
						else if((board[row][col-1]==board[row][col+1]&&board[row][col-1]==board[row][col+2])||(board[row][col-1]==board[row-1][col]&&board[row][col-1]==board[row-2][col])||(board[row][col-1]==board[row+1][col]&&board[row][col-1]==board[row+2][col])||(board[row][col-1]==board[row][col]&&board[row][col-1]==board[row][col+1]))
						{
							char temp=board[row][col];
								board[row][col]=board[row][col-1];
								board[row][col-1]=temp;
								swapdone=false;
						}
						else
						{ cout<<"\nNot Possible!\n";
						}
					}
					else
					{
						cout<<"\nNot Possible!\n";
					}
				}
			break;
			case KEY_DOWN:
				{
					if(row!=ROW-1)
					{
						if((board[row][col]==board[row+2][col]&&board[row][col]==board[row+3][col])||(board[row][col]==board[row+1][col+1]&&board[row][col]==board[row+1][col+2])||(board[row][col]==board[row+1][col-1]&&board[row][col]==board[row+1][col-2])||(board[row][col]==board[row+1][col+1]&&board[row][col]==board[row+1][col-1]))
						{
							char temp=board[row][col];
								board[row][col]=board[row-1][col];
								board[row-1][col]=temp;
								swapdone=false;
						}
						else if((board[row+1][col]==board[row-1][col]&&board[row+1][col]==board[row-2][col])||(board[row+1][col]==board[row][col-1]&&board[row+1][col]==board[row][col-2])||(board[row+1][col]==board[row][col+1]&&board[row+1][col]==board[row][col+2])||(board[row+1][col]==board[row][col-1]&&board[row+1][col]==board[row][col+1]))
						{
							char temp=board[row][col];
								board[row][col]=board[row-1][col];
								board[row-1][col]=temp;
								swapdone=false;
						}
						else
						{
							cout<<"\nNot Possible!\n";
						}
					}
					else
					{
						cout<<"\nNot Possible!\n";
					}
				}
			break;
		}
	}
}
