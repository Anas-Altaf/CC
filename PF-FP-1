#include<iostream>
#include<windows.h>
#include<cstdlib>
#include<ctime>
#include<conio.h>
#include<iomanip>
using namespace std;
#define KEY_UP 72
#define KEY_DOWN 80
#define KEY_LEFT 75
#define KEY_RIGHT 77
#define KEY_INSERT 82
//Main Array
const int ROW=10,COL=10;
	char board[ROW][COL];
//First Perfect Board 
void FirstBoardGenerator(char board[][COL]);
char RandSymbolAssigner();
void SymbolGeneration(char board[][COL]);
void checker(char board[][COL]);
void SymbolGeneration2(char board[][COL]);
void CheckedGenerater(char board[][COL]);
//Board
void board10x10(char board[][COL]);
//Modes
int EasyMode();
int HardMode();
//Further Working
void GameName();
void SelectOption();
void Credits();
void HighScores();
void Instructions();
void swap_replace(int &moves,int &scores,char board[][COL]);
void Instructions(int checker);
void PlayGame();
int main()
{
	int action=1;
	bool exit=true;
	GameName();
	SelectOption();
	
	while(action!=0&&action<5)
	{
	cout<<"\nChoose 1-5 to Perform Action : ";
	cin>>action;
		switch(action)
		{
			case 1: PlayGame(); break;
			case 2: Credits(); break;
			case 3: Instructions(); break;
			case 4: HighScores(); break;
			case 5: exit=false; break;
			default: cout<<"\nInvalid Input!\n";
		}
	}
	cout<<"\nThanks For Playing Game!(^_^)\n"<<endl;
	system("pause");
	return 0;
}
void FirstBoardGenerator(char board[][COL])
{
	SymbolGeneration(board);
	checker(board);
	CheckedGenerater(board);
}
//First Perfect Board Generation Functions
void SymbolGeneration(char board[ROW][COL])
{
	srand(time(0));
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{	
			board[i][j]=RandSymbolAssigner();
		}
	}
}
void board10x10(char board[][COL])
{
	system("cls");
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	cout<<"Here is the Board : "<<endl;
	cout<<"    1   2   3   4   5   6   7   8   9   10\n";
	cout<<"  .---.---.---.---.---.---.---.---.---.---."<<endl;
	cout<<"  |   |   |   |   |   |   |   |   |   |   |"<<endl;
	for(int i=0;i<ROW;i++)
	{
		if(i==ROW-1)
			cout<<i+1<<"| ";
		else
			cout<<i+1<<" | ";
		for(int j=0;j<COL;j++)
		{
			switch (board[i][j])
			   {
			   case '#':
				SetConsoleTextAttribute(h, 9);
				break;
			   case '@':
				SetConsoleTextAttribute(h, 10);
				break;
			   case '$':
				SetConsoleTextAttribute(h, 11);
				break;
			   case '%':
				SetConsoleTextAttribute(h, 12);
				break;
			   case '+':
				SetConsoleTextAttribute(h, 13);
				break;
				case '&':
				SetConsoleTextAttribute(h, 6);
				break;
				case '=':
				SetConsoleTextAttribute(h, 15);
				break;
			   }
			cout<<board[i][j]<<" | ";	
		}
		if(i==ROW-1)
			cout<<endl<<"  |...|...|...|...|...|...|...|...|...|...|"<<endl;
		else
		{
		cout<<endl<<"  |___|___|___|___|___|___|___|___|___|___|";
		cout<<endl<<"  |   |   |   |   |   |   |   |   |   |   |"<<endl;
		}
	}
}
void SymbolGeneration2(char board[ROW][COL])
{
	srand(time(0));
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{		
			{
				if(board[i][j]==' ')
					board[i][j]=RandSymbolAssigner();
			}
		}
	}
}
void checker(char board[][COL])
{
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			if((board[j][i]==board[j+1][i]&&board[j][i]==board[j+2][i])||(board[i][j]==board[i][j+1]&&board[i][j]==board[i][j+2]))
			{
				board[j+2][i]=' ';
				board[i][j+2]=' ';
			}
			if((board[i][j]==board[i+1][j+1]&&board[i][j]==board[i+2][j+2])||(board[i][j]==board[i+1][j-1]&&board[i][j]==board[i+2][j-2]))
			{
				board[i+2][j+2]=' ';
				board[i+2][j-2]=' ';
			}	
		}
	}
	
}
void CheckedGenerater(char board[][COL])
{
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			while(board[i][j]==' ')
			{
				SymbolGeneration2(board);
				checker(board);
			}
				
		}
	}
}
void CheckedGenerater2(char board[][COL])
{
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			if(board[i][j]==' ')
			{
				CheckedGenerater(board);
			}
				
		}
	}
}
char RandSymbolAssigner()
{
	int value=rand()%8;
	switch(value)
	{
		case 0: return '@';
		case 1: return '#';
		case 2: return '$';
		case 3: return '%';
		case 4: return '+';
		case 5: return '&';
		case 6: return '=';
		default:return '+';
	}
}
//Ended First Perfect Board Generator
void swap_replace(int &moves,int &scores,char board[][COL])
{
	int row,col;
	bool swapdone=true;
	while(swapdone)
	{
		board10x10(board);
		cout<<"\nEnter Row Number = ";cin>>row;
		cout<<"\nEnter Column Number = ";cin>>col;
		row=row-1;
		col=col-1;
		int keyinput;
		cout<<"\n                  /\ ";
		cout<<"\nEnter Direction <    > ";
		cout<<"\n                  \/ "<<endl;
		keyinput= _getch();
		switch(keyinput)
		{
			case KEY_UP:
				{
//					if(row!=0)
//					{
//						if((board[row][col]==board[row-1][col+1]&&board[row][col]==board[row-1][col+2])||(board[row][col]==board[row-1][col+1]&&board[row][col]==board[row-1][col-1])||(board[row][col]==board[row-1][col-1]&&board[row][col]==board[row-1][col-2])||(board[row][col]==board[row-2][col]&&board[row][col]==board[row-3][col]))
//						{
							char temp=board[row][col];
								board[row][col]=board[row-1][col];
								board[row-1][col]=temp;
								swapdone=false;
//						}
//						else if((board[row-1][col]==board[row][col+1]&&board[row-1][col]==board[row][col+2])||(board[row-1][col]==board[row][col-1]&&board[row-1][col]==board[row][col-2])||(board[row-1][col]==board[row+1][col]&&board[row-1][col]==board[row+2][col])||(board[row-1][col]==board[row][col-1]&&board[row-1][col]==board[row][col+1]))
//						{
//							char temp=board[row][col];
//								board[row][col]=board[row-1][col];
//								board[row-1][col]=temp;
//								swapdone=false;
//						}
//						else
//						{ cout<<"\nNot Possiblee! Try Again!\n";
//						}
//					}
//					else
//					{
//						cout<<"\nNot Possible! Try Again!\n";
//					}
				}
			break;
			case KEY_RIGHT:
				{
//					if(col!=COL-1)
//					{
//						if((board[row][col]==board[row-1][col+1]&&board[row][col]==board[row-2][col+1])||(board[row][col]==board[row][col+2]&&board[row][col]==board[row][col+3])||(board[row][col]==board[row+1][col+1]&&board[row][col]==board[row+2][col+1])||(board[row][col]==board[row-1][col+1]&&board[row][col]==board[row+1][col+1]))
//						{
//							char temp=board[row][col];
//								board[row][col]=board[row][col+1];
//								board[row][col+1]=temp;
//								swapdone=false;
//						}
//						else if((board[row][col+1]==board[row][col-1]&&board[row][col+1]==board[row][col-2])||(board[row][col+1]==board[row-1][col]&&board[row][col+1]==board[row-2][col])||(board[row][col+1]==board[row+1][col]&&board[row][col+1]==board[row+2][col])||(board[row][col+1]==board[row][col]&&board[row][col+1]==board[row][col+2]))
//						{
							char temp=board[row][col];
								board[row][col]=board[row][col+1];
								board[row][col+1]=temp;
								swapdone=false;
//						}
//						else
//						{ cout<<"\nNot Possiblee! Try Again!\n";
//						}
//					}
//					else
//					{
//						cout<<"\nNot Possible! Try Again!\n";
//					}
				}
			break;
			case KEY_LEFT:
				{
//					if(col!=0)
//					{
//						if((board[row][col]==board[row][col-2]&&board[row][col]==board[row][col-3])||(board[row][col]==board[row+1][col-1]&&board[row][col]==board[row+2][col-1])||(board[row][col]==board[row-1][col-1]&&board[row][col]==board[row-2][col-1])||(board[row][col]==board[row-1][col-1]&&board[row][col]==board[row+1][col-1]))
//						{
//							char temp=board[row][col];
//								board[row][col]=board[row][col-1];
//								board[row][col-1]=temp;
//								swapdone=false;
//						}
//						else if((board[row][col-1]==board[row][col+1]&&board[row][col-1]==board[row][col+2])||(board[row][col-1]==board[row-1][col]&&board[row][col-1]==board[row-2][col])||(board[row][col-1]==board[row+1][col]&&board[row][col-1]==board[row+2][col])||(board[row][col-1]==board[row][col]&&board[row][col-1]==board[row][col+1]))
//						{
							char temp=board[row][col];
								board[row][col]=board[row][col-1];
								board[row][col-1]=temp;
								swapdone=false;
//						}
//						else
//						{ cout<<"\nNot Possiblee! Try Again!\n";
//						}
//					}
//					else
//					{
//						cout<<"\nNot Possible! Try Again!\n";
//					}
				}
			break;
			case KEY_DOWN:
				{
//					if(row!=ROW-1)
//					{
//						if((board[row][col]==board[row+2][col]&&board[row][col]==board[row+3][col])||(board[row][col]==board[row+1][col+1]&&board[row][col]==board[row+1][col+2])||(board[row][col]==board[row+1][col-1]&&board[row][col]==board[row+1][col-2])||(board[row][col]==board[row+1][col+1]&&board[row][col]==board[row+1][col-1]))
//						{
//							char temp=board[row][col];
//								board[row][col]=board[row-1][col];
//								board[row-1][col]=temp;
//								swapdone=false;
//						}
//						else if((board[row+1][col]==board[row-1][col]&&board[row+1][col]==board[row-2][col])||(board[row+1][col]==board[row][col-1]&&board[row+1][col]==board[row][col-2])||(board[row+1][col]==board[row][col+1]&&board[row+1][col]==board[row][col+2])||(board[row+1][col]==board[row][col-1]&&board[row+1][col]==board[row][col+1]))
//						{
							char temp=board[row][col];
								board[row][col]=board[row-1][col];
								board[row-1][col]=temp;
								swapdone=false;
//						}
//						else
//						{
//							cout<<"\nNot Possiblee! Try Again!\n";
//						}
//					}
//					else
//					{
//						cout<<"\nNot Possible! Try Again!\n";
//					}
				}
			break;
		}
	}
	--moves;
	int lastRow=0;
	for(int i=0;i<ROW;i++)
	{
		for(int j=0;j<COL;j++)
		{
			if(board[i][j]==board[i][j+1]&&board[i][j]==board[i][j+2])
			{
				scores+=10;
				lastRow=i;
				while(lastRow!=0)
				{
					board[lastRow][j]=board[lastRow-1][j];
					board[lastRow][j+1]=board[lastRow-1][j+1];
					board[lastRow][j+2]=board[lastRow-1][j+2];
					--lastRow;
				}
				board[lastRow][j]=RandSymbolAssigner();
				board[lastRow][j+1]=RandSymbolAssigner();
				board[lastRow][j+2]=RandSymbolAssigner();
			}
			else if (board[i][j]==board[i+1][j]&&board[i][j]==board[i+2][j])
			{
				scores+=10;
				lastRow=i/3;
				while(lastRow>0)
				{
					board[i][j]=board[i-3][j];
					board[i+1][j]=board[i-2][j];
					board[i+2][j]=board[i-1][j];
						--lastRow;
				}
				board[0][j]=RandSymbolAssigner();
				board[1][j]=RandSymbolAssigner();
				board[2][j]=RandSymbolAssigner();
				if(board[i+2][j]==board[i+2][j+1]&&board[i+2][j]==board[i+2][j+2])
				{
					scores+=15;
					lastRow=i+2;
					while(lastRow!=0)
					{
						board[lastRow][j+1]=board[lastRow-1][j+1];
						board[lastRow][j+2]=board[lastRow-1][j+2];
						--lastRow;
					}
					board[lastRow][j+1]=RandSymbolAssigner();
					board[lastRow][j+2]=RandSymbolAssigner();
				}
			}
			else if(board[i][j]==board[i+1][j+1]&&board[i][j]==board[i+2][j+2])
			{
				scores+=20;
				lastRow=i;
				while(lastRow!=0)
				{
					board[i][j]=board[i-1][j];
					--lastRow;
				}
				board[lastRow][j]=RandSymbolAssigner();
				lastRow=i+1;
				while(lastRow!=0)
				{
					board[i+1][j+1]=board[i][j+1];
					--lastRow;
				}
				board[lastRow][j+1]=RandSymbolAssigner();
				lastRow=i+2;
				while(lastRow!=0)
				{
					board[i+2][j+2]=board[i+1][j+2];
					--lastRow;
				}
				board[lastRow][j+2]=RandSymbolAssigner();
			}
			else if(board[i][j]==board[i+1][j-1]&&board[i][j]==board[i+2][j-2])
			{
				scores+=20;
				lastRow=i;
				while(lastRow!=0)
				{
					board[i][j]=board[i-1][j];
					--lastRow;
				}
				board[lastRow][j]=RandSymbolAssigner();
				lastRow=i+1;
				while(lastRow!=0)
				{
					board[i+1][j-1]=board[i][j-1];
					--lastRow;
				}
				board[lastRow][j-1]=RandSymbolAssigner();
				lastRow=i+2;
				while(lastRow!=0)
				{
					board[i+2][j-2]=board[i+1][j-2];
					--lastRow;
				}
				board[lastRow][j-2]=RandSymbolAssigner();
			}
		}
	}
	
	
}
//Game Runner
void PlayGame()
{
	int mode,easyScore,hardScore;
	string name;
	cout<<"\nPlease Enter Your First Name Here = ";
	cin>>name;
	cout<<"\nModes\n";
	cout<<"1- EASY-MODE ->[ Board = 8x8 - Timer = 60 Seconds - Candies = 5 - Moves = No-Limit ]\n";
	cout<<"2- HARD-MODE ->[ Board = 10x10 - Timer = 40 Seconds - Candies = 7 - Moves = 15 ]\n";
	cout<<"Select Mode : ";
	cin>>mode;
	switch(mode)
	{
		case 1:	easyScore=EasyMode();
	 		break;
		case 2:	hardScore=HardMode();
			break;
		default : cout<<"\ninvalid Input!\n";
	}
	if(mode==1)
		cout<<"\nYour Total Scores of EASY-MODE = "<<easyScore<<endl;
	else if(mode==2)
		cout<<"\nYour Total Scores of HARD-MODE = "<<hardScore<<endl;
	else
	{
		cout<<"Invalid Mode Selection !\n";
	}

	
}
int HardMode()
{

	cout<<"\nHard Mode Started!\n";
	int moves=15,timer=60,scores=0,space=0;
    FirstBoardGenerator(board);
    while(moves>0)
    {
    	
    	cout<<"         ===="<<endl;
        cout <<"Timer : | "<<timer<<" |" <<endl;
        cout<<"         ===="<<endl;
        sleep(1);
        cout<<"         ===="<<endl;
        cout <<"Scores :| "<<scores<<" |" <<endl;
        cout<<"         ===="<<endl;
        cout<<"         ===="<<endl;
        cout <<"Moves : | "<<moves<<" |" <<endl;
        cout<<"         ===="<<endl;
        swap_replace(moves,scores,board); break;
        //--timer;
    }
    if(timer==0)
    	cout << "\nTime's Up ! ;)\n";
    else
    	cout<<"\nNo Moves Left ;)!\n";
    return scores; 
}
int EasyMode()
{
	char board[ROW][COL];
	FirstBoardGenerator(board);
	cout<<"\nEasy Mode Started!\n";
    return 0;
}
//Startings Output
void GameName()
{
		cout << "==========" << "   " << " =======" << "   " << "=========" << "    " << "========" << "    " << "=======" << "    " << "=========" << endl;
	cout << "    ||   " << "    " << "||     ||" << "  " << "||       " << "    " << "||       " << "   " << "||      " << "   " << "||       " << endl;
	cout << "    ||   " << "    " << "||     ||" << "  " << "||       " << "    " << "||       " << "   " << "||      " << "   " << "||       " << endl;
	cout << "    ||   " << "    " << "||     ||" << "  " << "||=======" << "    " << "||=======" << "   " << "||===== " << "   " << "||====== " << endl;
	cout << "    ||   " << "    " << "||     ||" << "  " << "||       " << "    " << "||       " << "   " << "||      " << "   " << "||       " << endl;
	cout << "    ||   " << "    " << " ======= " << " " << " ||       " << "    " << "||       " << "   " << "=======" << "    " << "=========" << endl;
	cout << endl << endl;
	cout << setw(20) << setfill(' ') << " ======= "<<"  "<<" ====== " << "  "<<" ======"<<"  "<<" ======= "<<"  "<<"||      =="<<"   "<<" ======="<<"   "<<" ====== "<<endl;
	cout << setw(20) << setfill(' ') << "||     ||"<<"  "<<"||    ||" << "  "<<"||     "<<"  "<<"||     ||"<<"  "<<"||     == " << "   " << "||     " << "   " << "||     ||" << endl;
	cout << setw(20) << setfill(' ') << "||     ||"<<"  "<<"||    ||" << "  "<<"||     " <<"  "<<"||     ||"<<"  "<<"||  ==   " << "    " << "||     " << "   " << "||     ||" << endl;
	cout << setw(20) << setfill(' ') << "||=====| "<<"  "<<"||    ||" << "  "<<"|======" <<"  "<<" |=====|"<<"  "<<" ||==     " << "    " << "|======" << "   " << "||     ||" << endl;
	cout << setw(20) << setfill(' ') << "||     ||"<<"  "<<"||====  " << "  "<<"||     " <<"  "<<"||     ||"<<"  "<<"||  ==    " << "   " << "||     " << "   " << " |====| " << endl;
	cout << setw(20) << setfill(' ') << "||     ||"<<"  "<<"||   || " << "  "<<"||     " <<"  "<<"||     ||"<<"  "<<"||    ==  " << "   " << "||     " << "   " << "||    ||" << endl;
	cout << setw(20) << setfill(' ') << " ======="<<"  "<< "||    ||" << "  "<<" ======" <<"  "<<"||     ||"<<"  "<<"||      ==" << "   " << " =======" << "  " << "||      ||" << endl<<endl;
	cout << "<" << setw(100) << setfill('_') << ">"<<endl;
}
void SelectOption()
{
	cout << "\n                                      Welcome to Toffee Breaker Saga!" << endl;
	cout << "                                  Select 1-5 from the Menu!"<<endl<<endl;
	cout << "                                               1.  Play Game!"<<endl;
	cout << "                                               2.  Credits"<<endl;
	cout << "                                               3.  Instructions/Rules"<<endl;
	cout << "                                               4.  High Scores"<<endl;
	cout << "                                               5.  Exit"<<endl<<endl;
}
void Credits()
	{
		cout << "\nThis game was created by two lazy individuals who took Candy crush lightly and were forced to work over nights on the \nlast 2 days. Introducing! \n \tMr Anas Altaf and Mr Muhammad Asjad \n\t 22F-3639 and 22F-3711 \n Excellent Chawali Koderz!";
	}
void Instructions()
	{
		cout << "\nThe game is played by swiping the toffees, in any direction (so long as they are not blocked), to create sets of 3 or more matching candies. You can match candies horizontally, vertically, diagonally or even L Shaped if lucky enough. When matched, the Toffees will break into sugar score and shift the toffees above them, allowing you to accomplish different high sugar goals. Match more than 3 candies to create combos and Powerups. \nExample breaking 4 or more toffees horizontally generates a Devastator toffee which when swapped with anything breaks the entire ROW! Similarly with horizontals. \nYou get Sugar Scores as mentioned below: \nvertical and horizontal matches : 10 sugar score \nDiagonal matches give you : 20 sugar score \nL-Shaped matches (IF YOU LUCKY GET IT EXACT NUMBER of 5) you get: 25 sugar score";
	}
void HighScores()
	{
		cout << "\nThe High Scores are as Under: 450 " << endl;

	}




